#!/usr/bin/env zsh

# already bootstraped?!
if [ -f $HOME/.arch/bootstrap_done ]
then
  exit 0
fi

if [ ! -f /usr/bin/sudo ]
then 
  echo 'please install sudo and re-run the script'
  exit 1
fi

echo 'start bootstrapping\n'

# base pkgs
echo 'installing base pkgs \n'
sudo pacman -S --needed --noconfirm \
  openssh \
  unzip \
  base-devel \
  zsh \
  &> /dev/null

# yay
echo 'installing yay \n'
test ! -d $HOME/git/yay \
  && mkdir -p $HOME/git \
  && cd $HOME/git \
  && git clone https://aur.archlinux.org/yay.git &> /dev/null \
  && cd yay \
  && makepkg -si --needed --noconfirm &> /dev/null \
  && cd $HOME \
  &> /dev/null

# programming languages
echo 'installing programming languages \n'
yay -S --needed --noconfirm \
  # rustup \
  go \
  # tinygo \
  # dart \
  nvm \
  # deno \
  python \
  python-pip \
  # wasmer \
  # protobuf \
  lua-language-server \
  lua51 \
  lua \
  # marksman \
  &> /dev/null

echo 'configuring programming languages \n'
# go
# go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest &> /dev/null
# go install google.golang.org/protobuf/cmd/protoc-gen-go@latest &> /dev/null
go install golang.org/x/tools/gopls@latest
# dart
# dart pub global activate protoc_plugin &> /dev/null
# rust
# rustup default stable &> /dev/null
# rustup component add rust-analyzer rust-src &> /dev/null
# rustup update &> /dev/null
# nvm
source /usr/share/nvm/init-nvm.sh
nvm install --lts &> /dev/null

# developer environment
echo 'installing developer environment \n'
yay -S --needed --noconfirm \
  tmux \
  mc \
  gotop \
  neovim \
  ripgrep \
  k9s \
  kubectl \
  # aws-cli \
  helm \
  lazygit \
  # mqttui \
  # wireshark-cli \
  qmk \
  # glow \
  luarocks \
  &> /dev/null

echo 'configuring developer environment \n'
# update global npm packages
npm update -g &> /dev/null
# netlify-cli
npm install -g netlify-cli &> /dev/null
# language servers
npm install -g pyright &> /dev/null
npm install -g tailwindcss-language-server &> /dev/null
npm install -g vscode-langservers-extracted &> /dev/null
npm install -g dockerfile-language-server-nodejs &> /dev/null
npm install -g typescript-language-server typescript
# prettier
npm install -g prettier
# neovim
nvim --headless "+Lazy! sync" +qa &> /dev/null
# tmux
if tmux info &> /dev/null; then 
  ~/.tmux/plugins/tpm/bin/clean_plugins &> /dev/null
  ~/.tmux/plugins/tpm/bin/update_plugins all &> /dev/null
else
  tmux start-server &> /dev/null \
    && tmux new-session -d &> /dev/null \
    && ~/.tmux/plugins/tpm/bin/install_plugins.sh &> /dev/null \
    && tmux kill-server &> /dev/null
fi

if [ ! $DOTFILES_INJECTED -eq 0 ]
then 
  echo 'bootstrapping finished! have fun.\n'
  touch $HOME/.arch/bootstrap_done
  exit 0
fi

# HINT: Now we are assuming an regular installation on arch linux

# window manager & system pkgs
echo 'installing window manager & system pkgs \n'
yay -S --needed --noconfirm \
  i3-wm \
  hsetroot \
  alacritty \
  pulseaudio \
  xorg-server \
  xorg-xrandr \
  xorg-xinit \
  netctl \
  wifi-menu \
  fstrim \
  bluez \
  bluez-utils \
  noto-fonts \
  noto-fonts-emoji \
  noto-fonts-cjk \
  noto-fonts-extra \
  ttf-nerd-fonts-symbols \
  ttf-nerd-fonst-symbols-mono \
  &> /dev/null

# user pkgs
echo 'installing user pkgs \n'
yay -S --needed --noconfirm \
  hugo \
  podman \
  podman-compose \
  aardvark-dns \
  netavark \
  buildah \
  skopeo \
  google-chrome \
  minikube \
  libvirt \
  qemu-base \
  flameshot \
  mupdf \
  mupdf-tools \
  &> /dev/null

echo 'enabling services \n'
sudo systemctl enable bluetooth.service &> /dev/null

echo 'configuring shell environment \n'
# regenerate font cache
fc-cache -f &> /dev/null

echo 'configuring infrastructure environment \n'
# podman
sudo touch /etc/subuid /etc/subgid
sudo usermod --add-subuids 100000-165535 --add-subgids 100000-165535 $(whoami)
sudo podman system migrate
# sudo echo "$USER ALL=(ALL) NOPASSWD: /usr/bin/podman" >> /etc/sudoers

# minikube (podman driver needs v1.26)
minikube config set driver podman
# minikube config set driver kvm2
# minikube config set rootless true

# libvirt
sudo usermod -a -G libvirt $(whoami)
sudo virsh net-autostart default

echo 'configuring user environment \n'
# qmk
mkdir -p $HOME/git \
  && cd $HOME/git \
  && git clone -b dztech/dz60rgb_ansi/v2 git@github.com:matsp/qmk_firmware.git &> /dev/null \
  && cd qmk_firmware \
  && make git-submodule &> /dev/null

# touch file to signal the successfull bootstrap
touch $HOME/.arch/bootstrap_done

### HINT: load keymap for mechanical keyboard with ansi layout and mapped umlaute
# localectl set-x11-keymap us altgr-intl altgr-intl nodeadkeys
